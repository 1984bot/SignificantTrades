const DEFAULTS = {
  pair: 'BTCUSD',
  preferQuoteCurrencySize: true,
  thresholds: [
    {
      amount: 100000,
      buyColor: 'rgba(76,175,80,.33)',
      sellColor: 'rgba(229,115,115,.33)'
    },
    {
      amount: 100000,
      buyColor: 'rgb(91,130,48)',
      sellColor: 'rgb(224,91,82)'
    },
    {
      amount: 1000000,
      gif: 'cash',
      buyColor: 'rgb(156,204,101)',
      sellColor: 'rgb(244,67,54)'
    },
    {
      amount: 10000000,
      gif: 'explosion',
      buyColor: 'rgb(255,160,0)',
      sellColor: 'rgb(233,30,99)'
    }
  ],
  exchanges: {
    huobi: { disabled: true },
    liquid: { disabled: true },
    bithumb: { disabled: true },
    hitbtc: { disabled: true },
    coinex: { disabled: true },
    bitmex: { disabled: true },
    bitfinex: { disabled: true },
    binance: { disabled: true },
    bybit: { disabled: true },
    bitstamp: { disabled: true },
    gdax: { disabled: true },
    kraken: { disabled: true },
    okex: { disabled: true },
    deribit: { disabled: true },
    ftx: { disabled: true },
    poloniex: { disabled: true },
  },
  series: {
    cvd: {
      enabled: false,
    }
  },
  maxRows: 30,
  aggregateTrades: true,
  decimalPrecision: null,
  showSlippage: false,
  liquidationsOnly: false,
  showLogos: true,
  showChart: true,
  chartRefreshRate: 50,
  timeframe: 1,
  debug: false,
  useAudio: false,
  audioIncludeInsignificants: true,
  audioVolume: 1.5,
  settings: ['other', 'chart', 'audio'],
  chartHeight: null,
  sidebarWidth: null,
  showThresholdsAsTable: true,
  showCounters: false,
  countersPrecision: 5000,
  countersSteps: [1000 * 30, 1000 * 60, 1000 * 60 * 15, 1000 * 60 * 30],
  countersCount: false,
  showStats: false,
  statsGranularity: 5000,
  statsPeriod: 180000,
  statsChart: false,
  statsCounters: [
    {
      name: "TRADES",
      output: "stats.buyCount + stats.sellCount",
      enabled: true,
      color: "#ffeeff",
      precision: 0,
      smoothing: 14
    },
    {
      name: "VOLUME Δ",
      output: "stats.buyAmount - stats.sellAmount",
      enabled: true,
      color: "#eeffee",
      precision: 0,
      smoothing: 14
    },
    {
      name: "TRADES Δ",
      output: "stats.buyCount - stats.sellCount",
      enabled: false,
      color: "#eeeeff",
      precision: 0,
      smoothing: 14
    },
    {
      name: "1H LIQUIDATIONS",
      output: "var output = [0, 0];\nfor (var i=0; i<trades.length; i++) {\n\tif (trades[i].liquidation)\n\t\toutput[trades[i].side === 'buy' ? 1 : 0] += trades[i].price * trades[i].size\n}\noutput;",
      enabled: false,
      period: 3600000
    },
    {
      name: "1H 100K+",
      output: "var output = 0;\nfor (var i=0; i<trades.length; i++) {\n\tif (trades[i].price * trades[i].size >= 100000)\n\t\toutput++\n}\noutput;",
      enabled: false,
      period: 3600000
    }
  ],

  // runtime state
  isSnaped: true,
  isLoading: false,
  actives: [],
  activeSeries: []
}

/**
 *  QUERY STRING PARSER
 *  every options should be settable from querystring using encoded json
 */

let QUERY_STRING

try {
  QUERY_STRING = JSON.parse(
    '{"' +
      decodeURI(location.search.substring(1))
        .replace(/"/g, '\\"')
        .replace(/&/g, '","')
        .replace(/=/g, '":"') +
      '"}'
  )
} catch (error) {
  QUERY_STRING = {}
}

for (let name in QUERY_STRING) {
  try {
    QUERY_STRING[name] = JSON.parse(QUERY_STRING[name])
  } catch (error) {}
}

/**
 * ACTUAL STORED OBJECT
 */

const STORED = JSON.parse(localStorage.getItem('settings'))

/**
 *  EXTRA
 *
 *  1.SUBDOMAIN
 *  automaticaly map subdomain as a *pair* and replace it in options
 *  eg: ethusd.aggr.trade will set the *pair* options to ethusd.
 */
const EXTRA = {}

const subdomain = window.location.hostname.match(/^([\d\w\-\_]+)\..*\./i)

if (subdomain && subdomain.length >= 2) {
  EXTRA.pair = subdomain[1].replace(/\_/g, '+').toUpperCase()
}

// <migrations>

// 29/03/19 (2.3)
// added custom colors, make sure everyone got some
if (STORED && STORED.thresholds && STORED.thresholds.length) {
  for (let i = 0; i < STORED.thresholds.length; i++) {
    if (typeof STORED.thresholds[i].buyColor === 'undefined') {
      STORED.thresholds[i].buyColor = DEFAULTS.thresholds[i].buyColor
    }

    if (typeof STORED.thresholds[i].sellColor === 'undefined') {
      STORED.thresholds[i].sellColor = DEFAULTS.thresholds[i].sellColor
    }
  }
}

// 14/04/20 (2.5)
// timeframe is now in seconds
if (STORED && STORED.timeframe > 1000) {
  STORED.timeframe /= 1000
}

// </migrations>

export {
  DEFAULTS,
  QUERY_STRING,
  STORED,
  EXTRA,
  EPHEMERAL_PROPERTIES
}