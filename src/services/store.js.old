import Vue from 'vue'
import Vuex from 'vuex'

import { DEFAULTS, EXTRA, STORED, QUERY_STRING, EPHEMERAL_PROPERTIES } from '../data/state'

Vue.use(Vuex)

const store = new Vuex.Store({
  defaults: DEFAULTS,
  state: Object.assign({}, DEFAULTS, EXTRA, STORED || {}, QUERY_STRING),
  mutations: {
    setPair(state, value) {
      state.pair = value.toString().toUpperCase()
    },
    toggleBaseCurrencySize(state, value) {
      state.preferQuoteCurrencySize = value ? true : false
    },
    setMaxRows(state, value) {
      state.maxRows = value
    },
    setDecimalPrecision(state, value) {
      state.decimalPrecision = value
    },
    toggleSlippage(state) {
      const values = [false, 'bps', 'price']

      let index = Math.max(0, values.indexOf(state.showSlippage))

      state.showSlippage = values[(index + 1) % values.length]
    },
    toggleLiquidationsOnly(state, value) {
      state.liquidationsOnly = value ? true : false
    },
    toggleAggregation(state, value) {
      state.aggregateTrades = value ? true : false
    },
    toggleDebug(state, value) {
      state.debug = value ? true : false
    },
    toggleLogos(state, value) {
      state.showLogos = value ? true : false
    },
    toggleChart(state, value) {
      state.showChart = value ? true : false
    },
    setChartRefreshRate(state, value) {
      state.chartRefreshRate = +value || 0
    },
    toggleTresholdsTable(state, value) {
      state.showThresholdsAsTable = value ? true : false
    },
    addThreshold(state) {
      state.thresholds.push({
        amount: state.thresholds[state.thresholds.length - 1].amount * 2,
        buyColor: 'rgb(0, 255, 0)',
        sellColor: 'rgb(255, 0, 0)'
      })
    },
    deleteThreshold(state, index) {
      state.thresholds.splice(index, 1)
    },
    setThresholdAmount(state, payload) {
      const threshold = state.thresholds[payload.index]

      if (threshold) {
        if (typeof payload.value === 'string' && /m|k$/i.test(payload.value)) {
          if (/m$/i.test(value)) {
            threshold.amount = parseFloat(payload.value) * 1000000
          } else {
            threshold.amount = parseFloat(payload.value) * 1000
          }
        }
        threshold.amount = +payload.value

        Vue.set(state.thresholds, payload.index, threshold)
      }
    },
    setThresholdGif(state, payload) {
      const threshold = state.thresholds[payload.index]

      if (threshold) {
        if (payload.value.trim().length) {
          threshold.gif = payload.value
        } else {
          payload.value = threshold.gif
          payload.isDeleted = true

          threshold.gif = null
        }

        Vue.set(state.thresholds, payload.index, threshold)
      }
    },
    setThresholdColor(state, payload) {
      const threshold = state.thresholds[payload.index]

      if (threshold) {
        threshold[payload.side] = payload.value

        Vue.set(state.thresholds, payload.index, threshold)
      }
    },
    enableExchange(state, exchange) {
      Vue.set(state.exchanges[exchange], 'disabled', false)
    },
    disableExchange(state, exchange) {
      Vue.set(state.exchanges[exchange], 'disabled', true)
    },
    showExchange(state, exchange) {
      Vue.set(state.exchanges[exchange], 'hidden', false)
    },
    hideExchange(state, exchange) {
      Vue.set(state.exchanges[exchange], 'hidden', true)
    },
    toggleExchangeVisibility(state, exchange) {
      Vue.set(state.exchanges[exchange], 'hidden', state.exchanges[exchange].hidden === true ? false : true)
    },
    toggleSettingsPanel(state, value) {
      const index = state.indexOf(value)

      if (index === -1) {
        state.push(value)
      } else {
        state.splice(index, 1)
      }
    },
    toggleAudio(state, value) {
      state.useAudio = value ? true : false
    },
    toggleAudioIncludeInsignificants(state, value) {
      state.audioIncludeInsignificants = value ? true : false
    },
    setAudioVolume(state, value) {
      state.audioVolume = value
    },
    setTimeframe(state, value) {
      state.timeframe = value
    },
    setExchangeThreshold(state, payload) {
      Vue.set(state.exchanges[payload.exchange], 'threshold', +payload.threshold)
    },
    setExchangeMatch(state, payload) {
      Vue.set(state.exchanges[payload.exchange], 'match', payload.match)
    },
    setChartHeight(state, value) {
      state.chartHeight = value || null
    },
    setSidebarWidth(state, value) {
      state.sidebarWidth = value || null
    },
    toggleCounters(state, value) {
      state.showCounters = value ? true : false
    },
    setCounterStep(state, payload) {
      const step = state.countersSteps[payload.index]

      if (payload.value) {
        Vue.set(state.countersSteps, payload.index, payload.value)
      } else {
        state.countersSteps.splice(payload.index, 1)
      }

      state.countersSteps = state.countersSteps.sort((a, b) => a - b)
    },
    replaceCounterSteps(state, counters) {
      state.countersSteps = counters.sort((a, b) => a - b)
    },
    toggleCountersCount(state, value) {
      state.countersCount = value ? true : false
    },
    toggleSerie(state, { id, value }) {
      if (!state.series[id]) {
        state.series[id] = {};
      }

      Vue.set(state.series[id], 'enabled', value ? true : false)
    },
    setSerieOption(state, { id, key, value }) {
      if (!state.series[id]) {
        state.series[id] = {};
      }

      Vue.set(state.series[id], key, value)
    },
    setChartPriceMargins(state, value) {
      state.chartPriceMargins = value
    },

    // runtime commit
    setOptimalDecimal(state,value) {
      state.optimalDecimal = value;
    },
    toggleLoading(state, value) {
      state.isLoading = value ? true : false
    },
    reloadExchangeState(state, exchange) {
      if (!exchange) {
        return
      }

      if (typeof exchange === 'object' && exchange.exchange) {
        exchange = exchange.exchange
      } else if (typeof exchange !== 'string') {
        return
      }

      if (!state.exchanges[exchange]) {
        Vue.set(state.exchanges, exchange, {})
      }

      const index = state.actives.indexOf(exchange)
      const active = state.exchanges[exchange].match && !state.exchanges[exchange].disabled && !state.exchanges[exchange].hidden

      if (active && index === -1) {
        state.actives.push(exchange)
      } else if (!active && index >= 0) {
        state.actives.splice(index, 1)
      }
    }
  },
  actions: {
    setSeriePreference({commit, state}, {id, key, value}) {
      try {
        value = JSON.parse(value);
      } catch (error) {}

      if (state.series[id] && state.series[id][key] === value) {
        return
      }

      commit('setSerieOption', {id, key, value})
    }
  }
})

store.subscribe((mutation, state) => {
  const copy = JSON.parse(JSON.stringify(state))

  for (let name of EPHEMERAL_PROPERTIES) {
    if (copy.hasOwnProperty(name)) {
      delete copy[name]
    }
  }

  if (['reloadExchangeState', 'setExchangeMatch'].indexOf(mutation.type) === -1) {
    localStorage.setItem('settings', JSON.stringify(copy))
  }

  switch (mutation.type) {
    case 'showExchange':
    case 'hideExchange':
    case 'toggleExchangeVisibility':
    case 'enableExchange':
    case 'disableExchange':
    case 'setExchangeMatch':
      store._mutations.reloadExchangeState[0](mutation.payload)

      clearTimeout(this._reloadExchangeStateTimeout)

      this._reloadExchangeStateTimeout = setTimeout(() => {
        store.commit('reloadExchangeState', null)
      }, 500)
      break
  }
})

export default store
